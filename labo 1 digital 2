/*
Universidad del Valle de Guatemala
Electronica Digital 2

Laboratorio 1
Carlos Sosa
*/

#define F_CPU 16000000
#include <avr/io.h>
#include <stdint.h>
#include <util/delay.h>
#include <avr/interrupt.h>
#include "display7seg.h"

// Declaraciones de funciones
void initPorts(void);
void timer0_init(void);
void leds(void);
void winner(uint8_t ganador);

volatile uint32_t segundos = 0;
volatile uint16_t contador = 0;
volatile uint8_t bandera_finaliza_contador = 0;
volatile uint8_t player1 = 0;
volatile uint8_t player2 = 0;

int main(void)
{
	initPorts();
	timer0_init();
	initDisplay7Seg();

	while (1) {
		// Si el botón PC0 está presionado, inicia la cuenta regresiva
		if (!(PINC & (1 << PORTC0))) {
			_delay_ms(50); // Antirrebote
			while (!(PINC & (1 << PORTC0))); // Esperar a que el botón se suelte

			for (int8_t i = 5; i >= 0; i--) {
				displayDigit(i);
				_delay_ms(1000);
			}

			// Habilitar el juego después de la cuenta regresiva
			bandera_finaliza_contador = 1;
		}

		// Si los jugadores pueden jugar
		if (bandera_finaliza_contador == 1) {
			// Jugador 1 (PC1)
			if (!(PINC & (1 << PORTC1)) && player1 < 4) {
				_delay_ms(50); // Antirrebote
				while (!(PINC & (1 << PORTC1))); // Esperar a que el botón se suelte
				player1++; // Incrementar puntuación del jugador 1
				leds(); // Actualizar LEDs
			}

			// Jugador 2 (PC2)
			if (!(PINC & (1 << PORTC2)) && player2 < 4) {
				_delay_ms(50); // Antirrebote
				while (!(PINC & (1 << PORTC2))); // Esperar a que el botón se suelte
				player2++; // Incrementar puntuación del jugador 2
				leds(); // Actualizar LEDs
			}
		if (player1 == 4){
			PORTB &= ~((1 << PORTB1) | (1 << PORTB0)); //jugador 2
			PORTD &= ~((1 << PORTD7) | (1 << PORTD6));// apagar leds jugador 2
			winner(1);
		}	
		else if (player2 == 4)
		{
			PORTB &= ~((1 << PORTB5) | (1 << PORTB4) | (1 << PORTB3) | (1 << PORTB2)); //apagar leds jugador 1
			winner(2);
		}
		}
	}
}

void initPorts(void)
{
	// Configurar botones (PC0, PC1, PC2) como entradas
	DDRC &= ~0b00000111; // PC0, PC1, PC2 como entradas
	PORTC |= 0b00000111; // Habilitar pull-ups en PC0, PC1, PC2

	// Configurar LEDs jugador 1 (D13, D12, D11, D10)
	DDRB |= (1 << DDB5) | (1 << DDB4) | (1 << DDB3) | (1 << DDB2); // PB5, PB4, PB3, PB2 como salidas

	// Configurar LEDs jugador 2 (D9, D8, D7, D6)
	DDRB |= (1 << DDB1) | (1 << DDB0); // PB1, PB0 como salidas
	DDRD |= (1 << DDD7) | (1 << DDD6); // PD7, PD6 como salidas

	// Apagar todos los LEDs inicialmente
	PORTB &= ~((1 << PB5) | (1 << PB4) | (1 << PB3) | (1 << PB2) | (1 << PB1) | (1 << PB0));
	PORTD &= ~((1 << PD7) | (1 << PD6));
}

void timer0_init(void)
{
	TCCR0A |= (1 << WGM01); // Configurar Timer0 en modo CTC
	TCCR0B |= (1 << CS02) | (1 << CS00); // Prescaler de 1024
	OCR0A = 255; // Valor máximo para comparación
	TIMSK0 |= (1 << OCIE0A); // Habilitar interrupción por comparación
	sei(); // Habilitar interrupciones globales
}

ISR(TIMER0_COMPA_vect)
{
	contador++; // Incrementar el contador en cada interrupción

	if (contador >= 61) { // ~61 interrupciones = 1 segundo (16 MHz y prescaler 1024)
		contador = 0; // Reiniciar el contador
		segundos++; // Incrementar el contador de segundos
	}

	if (segundos == 5) {
		bandera_finaliza_contador = 1; // Activar bandera después de 5 segundos
	}
}

void leds(void)
{
	// Actualizar LEDs jugador 1
	if (player1 >= 1) PORTB |= (1 << PORTB5); // D13
	if (player1 >= 2) PORTB |= (1 << PORTB4); // D12
	if (player1 >= 3) PORTB |= (1 << PORTB3); // D11
	if (player1 >= 4) PORTB |= (1 << PORTB2); // D10

	// Actualizar LEDs jugador 2
	if (player2 >= 1) PORTB |= (1 << PORTB1); // D9
	if (player2 >= 2) PORTB |= (1 << PORTB0); // D8
	if (player2 >= 3) PORTD |= (1 << PORTD7); // D7
	if (player2 >= 4) PORTD |= (1 << PORTD6); // D6
}

void winner(uint8_t ganador){
	displayDigit(ganador);
	_delay_ms(5000);
	player1 = 0;
	player2 = 0;
	bandera_finaliza_contador = 0;
	
	
	// Apagar todos los LEDs
	
	PORTB &= ~((1 << PORTB5) | (1 << PORTB4) | (1 << PORTB3) | (1 << PORTB2)); //apagar leds jugador 1
	PORTB &= ~((1 << PORTB1) | (1 << PORTB0)); //jugador 2
	PORTD &= ~((1 << PORTD7) | (1 << PORTD6));// apagar leds jugador 2

	// Apagar el display
	clearDisplay();
		
}
// .h
/*
 * display7seg.h
 *
 * Created: 1/25/2025 7:16:40 PM
 *  Author: cssos
 */ 

#ifndef DISPLAY7SEG_H
#define DISPLAY7SEG_H

#include <avr/io.h>

// Definición de pines para cada segmento
#define SEG_A PORTD3
#define SEG_B PORTD5
#define SEG_C PORTC5
#define SEG_D PORTC4
#define SEG_E PORTC3
#define SEG_F PORTD4
#define SEG_G PORTD2

// Declaración de funciones
void initDisplay7Seg(void); // Inicializar pines del display
void displayDigit(uint8_t digit); // Mostrar un dígito (0-9)
void clearDisplay(void); // Apagar todos los segmentos

#endif // DISPLAY7SEG_H

//.c

/*
 * display7seg.c
 *
 * Created: 1/25/2025 7:16:59 PM
 *  Author: cssos
 */ 

#include "display7seg.h"

void initDisplay7Seg(void){
	
    DDRD |= (1 << DDD3) | (1 << DDD5) | (1 << DDD4) | (1 << DDD2); // Pines D3, D5, D4, D2
    DDRC |= (1 << DDC3) | (1 << DDC4) | (1 << DDC5); // Pines A3, A4, A5	
	
	clearDisplay();
	
}

void clearDisplay(void){

PORTD &= ~((1 << PORTD2) | (1 << PORTD3) | (1 << PORTD4) | (1 << PORTD5)); //apagar todo

PORTC &= ~((1 << PORTC3) | (1 << PORTC4) | (1 << PORTC5));

}

void displayDigit(uint8_t digit) {

	clearDisplay(); //apaga todo

	switch (digit) {
		case 0:
		PORTD |= (1 << PORTD3) | (1 << PORTD5) | (1 << PORTD4);  // a, b, f
		PORTC |= (1 << PORTC3) | (1 << PORTC4) | (1 << PORTC5);  // e, d, c
		break;

		case 1:
		PORTD |= (1 << PORTD5); // b
		PORTC |= (1 << PORTC5); // c
		break;

		case 2:
		PORTD |= (1 << PORTD3) | (1 << PORTD5) | (1 << PORTD2);  // a, b, g
		PORTC |= (1 << PORTC3) | (1 << PORTC4); // e, d
		break;

		case 3:
		PORTD |= (1 << PORTD3) | (1 << PORTD5) | (1 << PORTD2);  // a, b, g
		PORTC |= (1 << PORTC4) | (1 << PORTC5); // d, c
		break;

		case 4:
		PORTD |= (1 << PORTD5) | (1 << PORTD2) | (1 << PORTD4);  // b, g, f
		PORTC |= (1 << PORTC5);  // c
		break;

		case 5:
		PORTD |= (1 << PORTD3) | (1 << PORTD2) | (1 << PORTD4);  // a, g, f
		PORTC |= (1 << PORTC4) | (1 << PORTC5); // d, c
		break;

		case 6:
		PORTD |= (1 << PORTD3) | (1 << PORTD2) | (1 << PORTD4);  // a, g, f
		PORTC |= (1 << PORTC3) | (1 << PORTC4) | (1 << PORTC5); // e, d, c
		break;

		case 7:
		PORTD |= (1 << PORTD3) | (1 << PORTD5);  // a, b
		PORTC |= (1 << PORTC5); // c
		break;

		case 8:
		PORTD |= (1 << PORTD3) | (1 << PORTD5) | (1 << PORTD2) | (1 << PORTD4); // a, b, g, f
		PORTC |= (1 << PORTC3) | (1 << PORTC4) | (1 << PORTC5);                 // e, d, c
		break;

		case 9:
		PORTD |= (1 << PORTD3) | (1 << PORTD5) | (1 << PORTD2) | (1 << PORTD4); // a, b, g, f
		PORTC |= (1 << PORTC5) | (1 << PORTC4); // c, d
		break;

		default:
		// Si no es un dígito válido, apaga todos los segmentos
		clearDisplay();
		break;
	}
}
