/*
 * main.c
 *
 * Created: 5/23/2024 10:42:46 AM
 *  Author: cssos
 */ 

#include <xc.h>
#define F_CPU 16000000UL
#include <avr/io.h>
#include <avr/interrupt.h>
#include <util/delay.h>
#include <avr/eeprom.h>

// Variables globales
volatile uint16_t contador1 = 0; 
volatile uint16_t valor = 0;
volatile uint8_t valoradc = 0; 
volatile uint8_t modo = 1;
volatile uint8_t memoria = 0;
volatile uint8_t grabar = 0;
volatile uint8_t lecturamemoria = 2;
volatile uint8_t PosicionA = 0;
volatile uint8_t PosicionB = 0;
volatile uint8_t PosicionC = 0;
volatile uint8_t PosicionD = 0;

uint8_t pullup = 0xF4;
uint8_t salida = 11;
uint8_t mask = 4;

/**
 * @brief Configura los botones con pull-up, salidas y máscara de interrupción.
 * 
 * @param pullup Configura las resistencias pull-up de los pines.
 * @param salidas Configura los pines como salidas.
 * @param valormascara Máscara para habilitar la interrupción de pines específicos.
 */
void ssetupbotones(uint8_t pullup, uint8_t salidas, uint8_t valormascara) {
    DDRD &= salida; // Configura los pines de salida como entradas.
    PORTD = 0; // Desactiva las resistencias pull-up.
    PCICR |= mask; // Habilita la interrupción desde los pines de D.
    PCMSK2 |= pullup; // Configura la máscara de las resistencias pull-up.
}

/**
 * @brief Lee los valores de los servos desde la EEPROM.
 * 
 * @param memoria Bandera que indica si se debe leer de la memoria.
 * @param lecturamemoria Bandera que indica el modo de lectura de la memoria.
 */
void servoread(uint8_t memoria, uint8_t lecturamemoria) {
    volatile uint16_t valort1;
    volatile uint8_t eepromval;

    if (memoria == 1) {
        if (lecturamemoria == 1) {
            EECR &= ~((1<<EEPM1)|(1<<EEPM0)); // Configura el modo de escritura de EEPROM.
            eepromval = eeprom_read_byte((uint8_t*)4); // Lee el valor de la posición 4 de la EEPROM.
            valort1 = (14.12 * eepromval) + 1198; // Calcula el valor total para el servo.
            OCR1AH = (valort1 & 0xFF00) >> 8; // Establece el valor alto del registro del comparador.
            OCR1AL |= valort1 & 0x00FF; // Establece el valor bajo del registro del comparador.

            eepromval = eeprom_read_byte((uint8_t*)5); // Lee el valor de la posición 5 de la EEPROM.
            OCR2A = (0.094 * eepromval) + 6.7; // Calcula y establece el valor del comparador A del Timer 2.

            eepromval = eeprom_read_byte((uint8_t*)6); // Lee el valor de la posición 6 de la EEPROM.
            OCR2B = (0.094 * eepromval) + 6.7; // Calcula y establece el valor del comparador B del Timer 2.
            
            eepromval = eeprom_read_byte((uint8_t*)7); // Lee el valor de la posición 7 de la EEPROM.
            valort1 = (14.12 * eepromval) + 1198; // Calcula el valor total para el servo.
            OCR1BH = (valort1 & 0xFF00) >> 8; // Establece el valor alto del registro del comparador B del Timer 1.
            OCR1BL |= valort1 & 0x00FF; // Establece el valor bajo del registro del comparador B del Timer 1.
        }
        memoria = 0; // Resetea la bandera de memoria.
    }
}

/**
 * @brief Configura el PWM para el canal especificado.
 * 
 * @param numeropot Número del potenciómetro a leer.
 * @param valoradc Valor del ADC leído.
 * @param memoria Bandera que indica si se debe leer de la memoria.
 * @param grabar Bandera que indica si se debe grabar en la memoria.
 */
void PPWM1(uint8_t numeropot, uint8_t valoradc, uint8_t memoria, uint8_t grabar) {
    volatile uint16_t valortotal;

    switch (numeropot) {
        case 0:
            ADMUX = (ADMUX & 0xF0) | numeropot; // Selecciona el canal del ADC.
            ADCSRA |= (1<<ADSC); // Inicia la conversión ADC.
            PosicionA = valoradc; // Guarda el valor leído del ADC.
            valortotal = (14.12 * valoradc) + 1198; // Calcula el valor total para el servo.
            OCR1AH = (valortotal & 0xFF00) >> 8; // Establece el valor alto del registro del comparador.
            OCR1AL |= valortotal & 0x00FF; // Establece el valor bajo del registro del comparador.
            while (ADCSRA & (1 << ADSC)); // Espera a que la conversión termine.
            break;

        case 1:
            ADMUX = (ADMUX & 0xF0) | numeropot; // Selecciona el canal del ADC.
            ADCSRA |= (1<<ADSC); // Inicia la conversión ADC.
            PosicionB = valoradc; // Guarda el valor leído del ADC.
            OCR2A = (0.094 * valoradc) + 6.7; // Calcula y establece el valor del comparador A del Timer 2.
            while (ADCSRA & (1 << ADSC)); // Espera a que la conversión termine.
            break;

        case 2:
            ADMUX = (ADMUX & 0xF0) | numeropot; // Selecciona el canal del ADC.
            ADCSRA |= (1<<ADSC); // Inicia la conversión ADC.
            PosicionC = valoradc; // Guarda el valor leído del ADC.
            OCR2B = (0.094 * valoradc) + 6.7; // Calcula y establece el valor del comparador B del Timer 2.
            while (ADCSRA & (1 << ADSC)); // Espera a que la conversión termine.
            break;

        case 3:
            ADMUX = (ADMUX & 0xF0) | numeropot; // Selecciona el canal del ADC.
            ADCSRA |= (1<<ADSC); // Inicia la conversión ADC.
            PosicionD = valoradc; // Guarda el valor leído del ADC.
            valortotal = (14.12 * valoradc) + 1198; // Calcula el valor total para el servo.
            OCR1BH = (valortotal & 0xFF00) >> 8; // Establece el valor alto del registro del comparador B del Timer 1.
            OCR1BL |= valortotal & 0x00FF; // Establece el valor bajo del registro del comparador B del Timer 1.
            while (ADCSRA & (1 << ADSC)); // Espera a que la conversión termine.
            break;
    }
}

/**
 * @brief Configura el PWM del Timer 1.
 */
void setupPWM1(void) {
    cli(); // Deshabilita las interrupciones globales.
    UCSR0B = 0; // Desactiva el USART0.
    DDRB |= (1<<DDB1) | (1<<DDB2); // Configura los pines de salida del Timer 1.
    TCCR1A = (1<<COM1A1) | (1<<COM1B1) | (1<<WGM11); // Configura el Timer 1 en modo Fast PWM con comparadores A y B.
    TCCR1B = (1<<WGM13) | (1<<WGM12) | (1<<CS11); // Configura el prescaler y el modo de Fast PWM.
    ICR1H = 0x9C; // Establece el valor alto del registro ICR1.
    ICR1L = 0x3F; // Establece el valor bajo del registro ICR1.
    sei(); // Habilita las interrupciones globales.
}

/**
 * @brief Configura el PWM del Timer 2.
 */
void setupPWM2(void) {
    cli(); // Deshabilita las interrupciones globales.
    UCSR0B = 0; // Desactiva el USART0.
    DDRB |= (1<<DDB3); // Configura el pin de salida del Timer 2.
    DDRD |= (1 << DDD3); // Configura el pin de salida del Timer 2.
    TCCR2A = (1<<COM2A1) | (1<<COM2B1) | (1<<WGM21) | (1<<WGM20); // Configura el Timer 2 en modo Fast PWM con comparadores A y B.
    TCCR2B = (1<<CS21); // Configura el prescaler del Timer 2.
    sei(); // Habilita las interrupciones globales.
}

/**
 * @brief Configura el ADC.
 */
void setupADC(void) {
    cli(); // Deshabilita las interrupciones globales.
    ADMUX = (1<<REFS0); // Configura el voltaje de referencia del ADC.
    ADCSRA = (1<<ADEN) | (1<<ADATE) | (1<<ADIE) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0); // Habilita el ADC, auto disparo, interrupciones y el prescaler.
    ADCSRB = 0; // Configura el modo de auto disparo del ADC.
    sei(); // Habilita las interrupciones globales.
}

int main(void) {
    setupPWM1(); // Configura el PWM del Timer 1.
    setupPWM2(); // Configura el PWM del Timer 2.
    setupADC(); // Configura el ADC.
    ssetupbotones(pullup, salida, mask); // Configura los botones con pull-up, salidas y máscara de interrupción.

    while (1) {
        switch (modo) {
            case 1:
                if (grabar == 1) {
                    cli(); // Deshabilita las interrupciones globales.
                    eeprom_update_byte((uint8_t*)0, PosicionA); // Guarda el valor de PosicionA en la EEPROM.
                    _delay_ms(10);
                    eeprom_update_byte((uint8_t*)1, PosicionB); // Guarda el valor de PosicionB en la EEPROM.
                    _delay_ms(10);
                    eeprom_update_byte((uint8_t*)2, PosicionC); // Guarda el valor de PosicionC en la EEPROM.
                    _delay_ms(10);
                    eeprom_update_byte((uint8_t*)3, PosicionD); // Guarda el valor de PosicionD en la EEPROM.
                    _delay_ms(10);
                    sei(); // Habilita las interrupciones globales.
                    grabar = 0; // Resetea la bandera de grabar.
                } else if (grabar == 0) {
                    if (memoria == 1) {
                        cli(); // Deshabilita las interrupciones globales.
                        PPWM1(memoria, valoradc, memoria, grabar); // Configura el PWM.
                        _delay_ms(10);
                        sei(); // Habilita las interrupciones globales.
                        memoria = 0; // Resetea la bandera de memoria.
                    } else if (memoria == 2) {
                        cli(); // Deshabilita las interrupciones globales.
                        PPWM1(memoria, valoradc, memoria, grabar); // Configura el PWM.
                        _delay_ms(10);
                        sei(); // Habilita las interrupciones globales.
                        memoria = 0; // Resetea la bandera de memoria.
                    } else if (memoria == 3) {
                        cli(); // Deshabilita las interrupciones globales.
                        PPWM1(memoria, valoradc, memoria, grabar); // Configura el PWM.
                        _delay_ms(10);
                        sei(); // Habilita las interrupciones globales.
                        memoria = 0; // Resetea la bandera de memoria.
                    }
                }
                break;
            
            case 2:
                cli(); // Deshabilita las interrupciones globales.
                servoread(memoria, lecturamemoria); // Lee los valores de los servos desde la EEPROM.
                _delay_ms(10);
                sei(); // Habilita las interrupciones globales.
                break;
        }
    }
    return 0;
}

// Interrupción del ADC
ISR(ADC_vect) {
    valoradc = ADCH; // Guarda el valor leído del ADC.
    ADCSRA |= (1 << ADIF); // Limpia la bandera de interrupción del ADC.
}

// Interrupción de los botones
ISR(PCINT2_vect) {
    cli(); // Deshabilita las interrupciones globales.
    if (!(PIND & (1 << PIND2))) {
        modo++; // Incrementa el modo.
        if (modo == 1) {
            grabar = 2; // Configura la bandera de grabar.
            PINB = 0b00000001; // Activa el LED correspondiente.
        } else if (modo == 2) {
            lecturamemoria = 2; // Configura la bandera de lectura de memoria.
            PINB = 0b00010000; // Activa el LED correspondiente.
        } else if (modo == 3) {
            lecturamemoria = 3; // Configura la bandera de lectura de memoria.
            PINB = 0b00010001; // Activa el LED correspondiente.
        }
        if (modo > 3) {
            modo = 0; // Resetea el modo si es mayor que 3.
        }
    }
    if (!(PIND & (1 << PIND4))) {
        memoria = 1; // Configura la bandera de memoria.
        if (modo == 1) {
            if (grabar == 2) {
                grabar = 1; // Cambia el estado de la bandera de grabar.
            } else if (grabar == 1) {
                grabar = 0; // Cambia el estado de la bandera de grabar.
            }
        } else if (modo == 2) {
            if (lecturamemoria == 2) {
                lecturamemoria = 1; // Cambia el estado de la bandera de lectura de memoria.
            } else if (lecturamemoria == 1) {
                lecturamemoria = 0; // Cambia el estado de la bandera de lectura de memoria.
            }
        }
        PORTC |= (1 << PINC4); // Activa el pin correspondiente.
        PORTC &= ~(1 << PINC5); // Desactiva el pin correspondiente.
        PORTC &= ~(1 << PINC6); // Desactiva el pin correspondiente.
    }
    if (!(PIND & (1 << PIND5))) {
        memoria = 2; // Configura la bandera de memoria.
        PORTC |= (1 << PINC5); // Activa el pin correspondiente.
        PORTC &= ~(1 << PINC4); // Desactiva el pin correspondiente.
        PORTC &= ~(1 << PINC6); // Desactiva el pin correspondiente.
    }        
    if (!(PIND & (1 << PIND6))) {
        memoria = 3; // Configura la bandera de memoria.
        PORTC |= (1 << PINC4); // Activa el pin correspondiente.
        PORTC &= ~(1 << PINC5); // Desactiva el pin correspondiente.
        PORTC &= ~(1 << PINC6); // Desactiva el pin correspondiente.
    }
    sei(); // Habilita las interrupciones globales.
}
