.INCLUDE "M328PDEF.INC"

.CSEG 

.org 0x0000
	JMP START

.org 0X0006
	JMP ISR_PCINT0

.org 0x00020
	JMP ISR_INT0

START:

	LDI R19, LOW(RAMEND)
	OUT SPL, R19
	LDI R20, HIGH(RAMEND)
	OUT SPH, R20 ; INICIAR PUNTERO

		.EQU UNI_MINU = 0x0101
		.EQU DECE_MINU = 0x0102 
		.EQU UNI_HORA = 0x0103
		.EQU DECE_HORA = 0x0104
		.EQU UNI_DIA = 0x0105
		.EQU DECE_DIA = 0x0106
		.EQU UNI_FECHA = 0x0107
		.EQU DECE_FECHA = 0x0108
		.EQU MODO_INC = 0x0109
		.EQU MODO_DEC = 0X010A //CARGANDO TODO A LA RAM
		.EQU UNI_SEC =0x010B
		.DEF MODO = R17
		.DEF MEDIO_SEGUNDO = R18

		//REGISTRO 19 USANDOSE PARA CHECK DISPLAYS
		//REGISTRO 20 USANDOSE PARA BLINK 1S
		//REGISTRO 21 USANDOSE PARA DELAY
		//REGISTRO 22 USANDOSE PARA CHECK BLINK 500mS

	LDI R16, 0b1111_1111 ; SALIDA PUERTO D
	OUT DDRD, R16

	LDI R17, 0b0001_1111 //HABILITANDO PULL UP
	OUT PORTB, R17

	LDI R17, 0b0010_0000 ; ENTRADA PUERTO B
	OUT DDRB, R17
	CBI PORTB, PB5
	LDI R17, 0b1111_1111 ; SALIDA PUERTO C
	OUT DDRC, R17

	LDI R16, 0
	STS UCSR0B, R16 ; PONER EN 0 RX/TX

	LDI R16, (1 << PCIE0) //CONFIG PARA EL BOTON INTERRUPCION
	STS PCICR, R16

	LDI R16, (1 << PCINT1) //HABILITAR LA INTERRUPCION EN PB2
	STS PCMSK0, R16

	CALL INIT_TIMER0

	LDI R16, (1 << TOIE0)
	STS TIMSK0, R16
	
	SEI

//SECCIONADO PARA LOS CLEARS

CLR R20
LDI ZH, HIGH(TABLA7SEG <<1)
LDI ZL, LOW(TABLA7SEG <<1)
LPM R20, Z
CLR R25

CLR R16
CLR R17
CLR R18
CLR R19

STS UNI_SEC, R16
STS UNI_MINU, R16
STS UNI_HORA, R16
STS DECE_MINU, R16
STS UNI_HORA, R16
STS DECE_HORA, R16

LOOP:

		CPI MODO, 1
		BREQ PRESET 
		CPI MODO, 2
		BREQ HORAS_MINUTOS
		CPI MODO, 3
		BREQ FECHA_CON_DIA
		CPI MODO, 4
		BREQ CONFIG_HORA_MINU
		CPI MODO, 5
		BREQ CONFIG_FECHA_DIA
		RJMP LOOP

		//CAÃ‘ONES

		PRESET:
			RJMP PRESET_SUBRUTINA

		HORAS_MINUTOS:
			RJMP HORAS_MINUTOS_SUBRUTINA

		FECHA_CON_DIA:
			RJMP FECHA_DIA_SUBRUTINA

		CONFIG_HORA_MINU:
			RJMP CONFIG_HORA_MINU_SUBRUTINA

		CONFIG_FECHA_DIA:
			RJMP  CONFIG_FECHA_DIA_SUBRUTINA

		
	TABLA7SEG: .DB 0X3F, 0X06, 0X5B, 0X4F, 0X66, 0X6D, 0X7D, 0X07, 0X07F, 0X6F //Tabla con lo que se quiere mostrar en el display --------------------------------------


		PRESET_SUBRUTINA:
		CHECK1:
			CPI R19, 1 //REVISANDO 10mS
			BREQ DISPLAYS_PRESET
			RJMP CHECK1

		DISPLAYS_PRESET:
			LDI R16, 0x01
			OUT PORTC, R16
			LDI ZH, HIGH(TABLA7SEG <<1)
			LDI ZL, LOW(TABLA7SEG <<1)
			CLR R16
			LDI R16, 0 //PRESET D1 COLOCADO EN 0
			ADD ZL, R16
			LPM R24, Z
			OUT PORTD, R24
			RCALL DEL1

		//DISPLAY2:
			LDI R16, 0x02
			OUT PORTC, R16
			LDI ZH, HIGH(TABLA7SEG << 1)
			LDI ZL, LOW(TABLA7SEG << 1)
			CLR R16 
			LDI R16, 0 //PRESET D2 COLOCADO EN 0
			ADD ZL, R16
			LPM R24, Z
			OUT PORTD, R24
			RCALL DEL1

		//DISPLAY3:
			LDI R16, 0x04
			OUT PORTC, R16
			LDI ZH, HIGH(TABLA7SEG << 1)
			LDI ZL, LOW(TABLA7SEG << 1)
			CLR R16
			LDI R16, 0 //PRESET D3 COLOCADO EN 0
			ADD ZL, R16
			LPM R24, Z
			OUT PORTD, R24
			RCALL DEL1

		//DISPLAY4:
			LDI R16, 0x08
			OUT PORTC, R16
			LDI ZH, HIGH(TABLA7SEG << 1)
			LDI ZL, LOW(TABLA7SEG << 1)
			CLR R16
			LDI R16, 0 //PRESET D4 COLOCADO EN 0
			ADD ZL, R16
			LPM R24, Z
			OUT PORTD, R24
			RCALL DEL1
			RET

		DEL1:
			LDI R21, 255
			LDI R23, 20
			BUCLE1:
				DEC R21
				BRNE BUCLE1
				LDI R21, 255
				DEC R23
				BRNE BUCLE1
				RET
			JMP LOOP

		HORAS_MINUTOS_SUBRUTINA:
			
		CHECK2:
			CPI R19, 1 //REVISANDO 10mS
			BREQ DISPLAYS_HORA_MINU
			CPI R20, 100 //REVISANDO 1S
			BREQ BLINK_SEGUNDO
			CPI R17, 0
			BRNE LOOP_SUB
			RJMP CHECK2
			
		LOOP_SUB:
			JMP LOOP

		DISPLAYS_HORA_MINU:
			RJMP DISPLAY2_SUB

				BLINK_SEGUNDO:
			CLR R20
			CLR R16
			LDS R16, UNI_SEC
			INC R16
			STS UNI_SEC, R16
			CPI R16, 2 //MODIFICADOR DE SEGUNDOS A MINUTOS
			BREQ INCREMENTO_MINUTO
			RJMP CHECK2

		INCREMENTO_MINUTO:
			CLR R16
			STS UNI_SEC, R16
			CLR R16
			LDS R16, UNI_MINU
			INC R16
			STS UNI_MINU, R16
			CPI R16, 10
			BREQ INCREMENTO_DECENA_MINUTO
			JMP LOOP

		INCREMENTO_DECENA_MINUTO:
			//HACER CLEAR DE UNI_MINU
			CLR R16
			STS UNI_MINU, R16
			//EMPEZAR DECENA MINUTO
			CLR R16
			LDS R16, DECE_MINU
			INC R16
			STS DECE_MINU, R16
			CPI R16, 6
			BREQ INCREMENTO_UNIDAD_HORA
			JMP LOOP

		INCREMENTO_UNIDAD_HORA:
			//HACER CLEAR DE DECE_MINU
			CLR R16
			STS DECE_MINU, R16
			CLR R16
			LDS R16, UNI_HORA
			INC R16
			STS UNI_HORA, R16
			CPI R16, 10
			BREQ INCREMENTO_DECENA_HORA
			JMP LOOP

		INCREMENTO_DECENA_HORA:
			//HACER CLEAR DE DECE_MINU
			CLR R16
			STS UNI_HORA, R16
			CLR R16
			LDS R16, DECE_HORA
			INC R16
			STS DECE_HORA, R16
			CPI R16, 2
			BREQ COMPROBAR
			JMP LOOP
		
		COMPROBAR:
		//VOLVER A HACER CLEAR DE UNI_HORA
			CLR R16
			STS UNI_HORA, R16
			CLR R16
			LDS R16, UNI_HORA
			INC R16
			STS UNI_HORA, R16
			CPI R16, 3
			BREQ COMPROBAR_59_MINUTOS
			JMP LOOP
		
		COMPROBAR_59_MINUTOS:
		CLR R16
		STS UNI_MINU, R16
		STS DECE_MINU, R16
		STS UNI_HORA, R16
		STS DECE_HORA, R16
		JMP LOOP

		DISPLAY2_SUB:
		CLR R19
		RJMP DISPLAY2_CANNON

		DISPLAY2_CANNON:
			RCALL DISPLAYS2
			RJMP Loop

		DISPLAYS2:
			LDI R16, 0x01
			OUT PORTC, R16
			LDI ZH, HIGH(TABLA7SEG <<1)
			LDI ZL, LOW(TABLA7SEG <<1)
			CLR R16
			LDS R16, UNI_MINU
			ADD ZL, R16
			LPM R24, Z
			OUT PORTD, R24
			RCALL DEL
		//DISPLAY2_SUB:
			LDI R16, 0x02
			OUT PORTC, R16
			LDI ZH, HIGH(TABLA7SEG << 1)
			LDI ZL, LOW(TABLA7SEG << 1)
			CLR R16 
			LDS R16, DECE_MINU
			ADD ZL, R16
			LPM R24, Z
			OUT PORTD, R24
			RCALL DEL

		//DISPLAY3_SUB:
			LDI R16, 0x04
			OUT PORTC, R16
			LDI ZH, HIGH(TABLA7SEG << 1)
			LDI ZL, LOW(TABLA7SEG << 1)
			CLR R16
			LDS R16, UNI_HORA
			ADD ZL, R16
			LPM R24, Z
			OUT PORTD, R24
			RCALL DEL

		//DISPLAY4_SUB:
			LDI R16, 0x08
			OUT PORTC, R16
			LDI ZH, HIGH(TABLA7SEG << 1)
			LDI ZL, LOW(TABLA7SEG << 1)
			CLR R16
			LDS R16, DECE_HORA
			ADD ZL, R16
			LPM R24, Z
			OUT PORTD, R24
			RCALL DEL
			RET

		DEL:
			LDI R21, 255
			LDI R23, 20
			BUCLE:
				DEC R21
				BRNE BUCLE
				LDI R21, 255
				DEC R23
				BRNE BUCLE
				RET

		FECHA_DIA_SUBRUTINA:
			JMP LOOP
		CONFIG_HORA_MINU_SUBRUTINA:
			JMP LOOP
		CONFIG_FECHA_DIA_SUBRUTINA:
			JMP LOOP

//----------------------------------------------------------
//						TIMERS
//----------------------------------------------------------

	INIT_TIMER0:
		LDI R16, (1 << CS02)|(1<<CS00)
		OUT TCCR0B, R16

		LDI R16, 178 // TIMER0 EN 10 ms
		OUT TCNT0, R16
		RET

	ISR_INT0:
		PUSH R16 //GUARDAR STATUS
		IN R16, SREG //GUARDAR SREG EN R16
		PUSH R16 //GUARDAR STATUS

		LDI R16, 178
		OUT TCNT0, R16

		INC R19 //10mS
		INC R20 //1S
		INC R22 //500mS
		CPI R22, 50 //REVISANDO 500mS
		BRNE SALIDA
		LDI R27, 0b0010_0000
		EOR MEDIO_SEGUNDO, R27
		OUT PORTB, MEDIO_SEGUNDO
		CLR R22

	SALIDA:
		POP R16 //SACAR STATUS
		OUT SREG, R16 //RESTAURAR SREG
		POP R16 // SACAR STATUS DE NUEVO
		RETI

	ISR_PCINT0:
		PUSH R16 //GUARDAR STATUS
		IN R16, SREG //GUARDAR SREG EN R16
		PUSH R16 //GUARDAR STATUS
		
		IN R16, PINB 
		SBRC R16, PB1
		RJMP SALIDA_ISR_BI
		
	CAMBIAR_MODO:
		INC R17
		CPI R17, 5
		BREQ RESTART
		JMP SALIDA_ISR_BI

	RESTART: 
		LDI R17, 1

	SALIDA_ISR_BI:
		SBI PCIFR, PCIF0
		POP R16 //SACAR STATUS
		OUT SREG, R16 //RESTAURAR SREG
		POP R16 // SACAR STATUS DE NUEVO
		RETI 
